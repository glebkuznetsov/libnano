OligoSet

    Oligos are an ordered list of  

        SequenceChunks

            this collection can be represented by an array of pointers

                and the sequence of an Oligo can be the contiguous memory 
                comprising SequenceChunks

                    Contiguous memory becomes less important if the chunks
                    are shared in "versions" of an Oligo.  So it might make
                    more sense to cache the sequence of the current version
                    of an Oligo

                    And anytime a SequenceChunk changes, generate a new 
                    SequenceChunk.  Only preserve changes on Commit so 
                    that multiple changes in a SequenceChunk don't trigger
                    too many changes (AKA keep a clean history).  So probably
                    need to rebase.

                    This could also be extended to SQL by means of Foreign
                    Keys with a table for Oligos and a table for SequenceChunk
                    Oligo tables would be an ordered list of SequenceChunks by ID in the Oligo table.  On update you create a new Oligo Table for the
                    new Oligo.  Then just keep a table with all of the oligo versions

                    Alternatively, you could add an oligo version number to the table
                    and a created version and stale version to the SequenceChunk table
                    or soemthing like that





Features can point to chunks and indices in the Oligo, and can be inherited 
if the chunks associated with them go unchanged.

    Should features be immutable in index/chunk? That is can a feature 
    change index/chunk if the chunk doesn't change?  I would think not.


Git can easily version a sequence with 80ish bases per line, as well as features
that order is presevered from a genbank file.

Genbank Version could be a commit hash?

Lastly, Genbank format is unsuitable for diffing due to the numbers included in the
ORIGIN per line.  Therefore, it pretty printed JSON should be fine so long as Order 
is preserved and textwrapping is applied.  Additionally chunking is important to prevent textwraping from propagating through the whole sequence.  
Chunk size should be chosen as large as reasonbly possible maybe an order of magnitude more granular than the frequency of changes.  If you are recoding 10% of all bases a chunk size of N/100 might make sense.  Chunks can be delimited by a line break (newline and no other characters).

Chunking rules:  base change == no rechunking
                 insertion ==  split chunk into 2 and append insertion
                                to the 5 prime most chunk
                 deletion == split chunk into 2 chunks at deletion

OR keep all chunks around and use Chunking IDs (UUIDs?). Maps better to SQL versioning.
Then you can have an Oligo set in a single file with all versions.  Oligo Versioning could be done simply by adding a new list of Chunks and appending chunks to the list of all chunks.  Chuck size could be arbitrarily small in the case of trying to represent DNA Origami oligos. 

Should Features be able to span Oligos?  The can using remote's in genbank format.

So, do we want to store sets of oligos in a single file or single oligos?





